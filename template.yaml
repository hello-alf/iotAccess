AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Infraestructura para Control de acceso IOT

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 10
    MemorySize: 256
    Architectures:
      - arm64
    Environment:
      Variables:
        TABLE: !Ref ConnectionsTable

Parameters:
  StageName:
    Type: String
    Default: dev
  IotAccessTopic:
    Type: String
    Default: access/door
  IotResultAllowedTopic:
    Type: String
    Default: access/allowed
  IotResultDeniedTopic:
    Type: String
    Default: access/denied

Resources:
  HttpApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/http-api/${AWS::StackName}
      RetentionInDays: 7

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      TableName: !Sub ${AWS::StackName}-connections

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      TableName: !Sub ${AWS::StackName}-users

  DoorConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: !Sub ${AWS::StackName}-door-config

  AccessEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      TableName: !Sub ${AWS::StackName}-access-events

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-users
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: web
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED

  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlersSocket.connect
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlersSocket.disconnect
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  DefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlersSocket.defaultRoute
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - Statement:
            Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/POST/@connections/*

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-ws
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlerPublicRest.handler
      Environment:
        Variables:
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        PostLogin:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /auth/login
            Method: POST
            Auth:
              Authorizer: NONE

  EnrollFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlerEnrollRest.handler
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        EnrollNfc:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{userId}/enroll
            Method: POST

  AccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlerAccessRest.handler
      Environment:
        Variables:
          DOOR_CONFIG_TABLE: !Ref DoorConfigTable
          USERS_TABLE: !Ref UsersTable
          ACCESS_EVENTS_TABLE: !Ref AccessEventsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DoorConfigTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
        - DynamoDBWritePolicy:
            TableName: !Ref AccessEventsTable
      Events:
        PostAccess:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /access/request
            Method: POST

  AccessIoTFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlerAccessIoT.handler
      Environment:
        Variables:
          DOOR_CONFIG_TABLE: !Ref DoorConfigTable
          USERS_TABLE: !Ref UsersTable
          ACCESS_EVENTS_TABLE: !Ref AccessEventsTable
          RESULT_TOPIC_ALLOWED: !Ref IotResultAllowedTopic
          RESULT_TOPIC_DENIED: !Ref IotResultDeniedTopic
          NFC_SECRET: demo-secret # o usa Secrets Manager
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DoorConfigTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
        - DynamoDBWritePolicy:
            TableName: !Ref AccessEventsTable
        - Statement:
            Effect: Allow
            Action:
              - iot:Publish
              - iot:DescribeEndpoint # para descubrir el endpoint data-ATS en runtime
            Resource:
              - !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/access/* # publica en access/*
              - '*' # DescribeEndpoint no es resource-scoped

  IoTAccessRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: access_rule
      TopicRulePayload:
        AwsIotSqlVersion: '2016-03-23'
        Sql: !Sub SELECT * FROM '${IotAccessTopic}'
        RuleDisabled: false
        Actions:
          - Lambda:
              FunctionArn: !GetAtt AccessIoTFunction.Arn

  AccessFromIotInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AccessIoTFunction
      Principal: iot.amazonaws.com
      SourceArn: !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:rule/access_rule

  # DebugEchoFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: src/
  #     Handler: debug.echo
  #     Events:
  #       Echo:
  #         Type: HttpApi
  #         Properties:
  #           ApiId: !Ref HttpApi
  #           Path: /debug
  #           Method: GET

  # ResolveNfcToUserFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: src/
  #     Handler: handlerAccess.resolveNfc
  #     Environment:
  #       Variables:
  #         USERS_TABLE: !Ref UsersTable
  #     Policies:
  #       - DynamoDBReadPolicy:
  #           TableName: !Ref UsersTable
  #     Events:
  #       ResolveNfc:
  #         Type: HttpApi
  #         Properties:
  #           ApiId: !Ref HttpApi
  #           Path: /nfc/resolve-to-user
  #           Method: GET

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowHeaders:
          - Authorization
          - Content-Type
        AllowOrigins:
          - '*'
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
              audience:
                - !Ref CognitoUserPoolClient
            IdentitySource: $request.header.Authorization

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Sub integrations/${ConnectIntegration}

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Sub integrations/${DisconnectIntegration}

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      Target: !Sub integrations/${DefaultIntegration}

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref StageName
      AutoDeploy: true

  ConnectInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect

  DisconnectInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect

  DefaultInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$default

Outputs:
  WebSocketUrl:
    Description: URL WSS para conectarse
    Value: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketStage}
  HttpApiUrl:
    Description: URL base para llamadas REST
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
  Issuer:
    Description: URL de proveedor de identidad Cognito
    Value: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
  UserPoolId:
    Description: ID del grupo de usuarios de Cognito
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: ID del cliente del grupo de usuarios de Cognito
    Value: !Ref CognitoUserPoolClient